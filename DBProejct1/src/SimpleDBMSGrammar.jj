options
{
  static = true;
  DEBUG_PARSER = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(SimpleDBMSParser)

import db.*;
import java.util.*;

public class SimpleDBMSParser
{
  private static SimpleDBMS dbms = new SimpleDBMS();
  
  public static void main(String args[]) throws ParseException, ErrorException
  {
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    System.out.print("DB_2013-11422> ");

    while (true)
    {
      try
      {
        parser.command();
      }
      catch (ParseException e)
      {
        PrintMessages p = new PrintMessages(Flags.SYNTAX_ERROR);
        p.print();
        SimpleDBMSParser.ReInit(System.in);
      }
      catch (ErrorException e)
      {
        e.p.print();
        SimpleDBMSParser.ReInit(System.in);
      }
    }
  }
}

PARSER_END(SimpleDBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

// grammar file의 빨간 글씨로 된 keyword들
TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE_TABLE : "create table" >
| < DROP_TABLE : "drop table" >
| < DESC : "desc" >
| < INSERT : "insert into" >
| < DELETE : "delete from" >
| < SELECT : "select" >
| < SHOW_TABLES : "show tables" >
| < NULL : "null" >
| < NOT_NULL : "not null" >
| < PRIMARY_KEY : "primary key" >
| < FOREIGN_KEY : "foreign key" >
| < REFERENCES : "references" >
| < VALUES : "values" >
| < AS : "as" >
| < FROM : "from" >
| < WHERE : "where" >
| < OR : "or" >
| < AND : "and" >
| < NOT : "not" >
| < IS : "is" >
| < ALL : "*" > // '*'가 라벨로 작용할 수 없으므로 임의로 'ALL'을 붙임
}

// 그 외
TOKEN :
{
  < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >
| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >
| < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < PERIOD : "." >
| < UNDERSCORE : "_" >
| < SIGN : "+" | "-" >
| < DIGIT : [ "0"-"9" ] >
| < ALPHABET : [ "a"-"z", "A"-"Z" ] >
| < COMP_OP : ">" | "<" | "=" | ">=" | "<=" | "!=" >
| < QUOTE : "`" >
| < NNNN : (< DIGIT >){4} >
| < NN : (< DIGIT >){2} >
| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > >
| < NON_QUOTE_SPECIAL_CHARACTERS : [ "~", "`", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "+", "=",
"|", "{", "[", "]", "}", "\\", ";", ":", ",", "<", ".", ">", "?", "/"] >
| < UNUSED_QUOTE_MARK : "\'" | "\"" > // 따옴표 실수로 들어갔을 때 syntax error 뱉도록 token에 추가
}

// grammar file 그대로 구현
void command() : {}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
      dbms.close();
      System.exit(0);
    }
  ) 
}

void queryList() : { PrintMessages p; }
{
  (
    p = query()
    < SEMICOLON >
    {
      p.print();
    }
  )+
}

PrintMessages query() : { PrintMessages p; }
{
  (
    p = createTableQuery() { return p; }
  | p = dropTableQuery() { return p; }
  | p = descQuery() { return p; }
  | p = insertQuery() { return p; }
  | p = deleteQuery() { return p; }
  | p = selectQuery() { return p; }
  | p = showTablesQuery() { return p; }
  )
  (
    {
      return p;
    }
  )
}

PrintMessages createTableQuery() : { String tn; Table t; ArrayList<Column> cl; }
{
  < CREATE_TABLE >
  tn = tableName()
  {
    if (dbms.isExistingTable(tn)) {
      throw new ErrorException(Flags.TABLE_EXISTENCE_ERROR);
    } else {
      t = new Table(tn);
    }
  }
  tableElementList(t)
  {
    dbms.createTable(t);
    return new PrintMessages(Flags.CREATE_TABLE_DONE, tn);
  }
}

PrintMessages dropTableQuery() : { String tn; }
{
  < DROP_TABLE >
  tn = tableName()
  {
    if (!dbms.isExistingTable(tn)) {
      throw new ErrorException(Flags.NO_SUCH_TABLE);
    }

    Table t = dbms.getTable(tn);
    for (Column c: t.getColumns()) {
      if (c.getIsReferenced()) {
        throw new ErrorException(Flags.DROP_REFERENCED_TABLE_ERROR, tn);
      }
    }
    
    dbms.dropTable(tn);

    return new PrintMessages(Flags.DROP_TABLE_DONE, tn);
  }
}

PrintMessages descQuery() : { String tn; }
{
  < DESC >
  tn = tableName()
  {
    if (!dbms.isExistingTable(tn)) {
      throw new ErrorException(Flags.NO_SUCH_TABLE);
    }
    dbms.printTable(tn);
    return new PrintMessages(Flags.DESC_DONE);
  }
}

PrintMessages insertQuery() : { String tn; ArrayList<Value> vl; }
{
  < INSERT >
  tn = tableName()
  vl = insertColumnsAndSource()
  {
    dbms.insertValues(tn, vl);
    return new PrintMessages(Flags.INSERT_DONE);
  }
}

PrintMessages deleteQuery() : { String tn; }
{
  < DELETE >
  tn = tableName()
  (
    whereClause()
  )?
  {
    return new PrintMessages(Flags.NOTHING);
  }
}

PrintMessages selectQuery() : {}
{
  < SELECT >
  selectList()
  tableExpression()
  {
    return new PrintMessages(Flags.NOTHING);
  }
}

PrintMessages showTablesQuery() : {}
{
  < SHOW_TABLES >
  {
    dbms.showTables();
    return new PrintMessages(Flags.SHOW_TABLES_DONE);
  }
}

void tableElementList(Table t) : { int key; boolean pk = false; }
{
  < LEFT_PAREN >
  key = tableElement(t)
  {
    if (key == Flags.PRIMARY_KEY) {
      pk = true;
    }
  }
  (
    < COMMA >
    key = tableElement(t)
    {
      if (key == Flags.PRIMARY_KEY) {
        if (pk == true) {
          throw new ErrorException(Flags.DUPLICATE_PRIMARY_KEY_DEF_ERROR);
        }
        pk = true;
      }
    }
  )*
  < RIGHT_PAREN >
}

int tableElement(Table t) : { Column c; int key = Flags.NOTHING; }
{
  (    columnDefinition(t)
  | key = tableConstraintDefinition(t)
  )
  (    {
      return key;
    }
  )
}

void columnDefinition(Table t) : { String cn; DataType dt; boolean isNull = true; }
{
  cn = columnName()
  dt = dataType()
  (
    < NOT_NULL >
    { isNull = false; }
  )?
  {
    t.addColumn(new Column(cn, dt, isNull));
  }
}

void whereClause() : {}
{
  < WHERE >
  booleanValueExpression()
}

void fromClause() : {}
{
  < FROM >
  tableReferenceList()
}

void tableReferenceList() : {}
{
  referedTable()
  (
    < COMMA >
    referedTable()
  )?
}

void referedTable() : {}
{
  tableName()
  (
    LOOKAHEAD(4) // choice conflict 발생, LOOKAHEAD 사용
    < AS >
    tableName()
  )?
}

void booleanValueExpression() : {}
{
  booleanTerm()
  (
    < OR >
    booleanTerm()
  )*
}

void booleanTerm() : {}
{
  booleanFactor()
  (
    < AND >
    booleanFactor()
  )*
}

void booleanFactor() : {}
{
  (
    < NOT >
  )?
  booleanTest()
}

void booleanTest() : {}
{
  predicate()
| parenthesizedBooleanExpression()
}

void predicate() : {}
{
  LOOKAHEAD(4) // choice conflict 발생, LOOKAHEAD 사용
  comparisonPredicate()
| nullPredicate()
}

void comparisonPredicate() : {}
{
  compOperand()
  < COMP_OP >
  compOperand()
}

void compOperand() : {}
{
  comparableValue()
| (
    LOOKAHEAD(4) // choice conflict 발생, LOOKAHEAD 사용
    tableName()
    < PERIOD >
  )?
  columnName()
}

void parenthesizedBooleanExpression() : {}
{
  < LEFT_PAREN >
  booleanValueExpression()
  < RIGHT_PAREN >
}

void nullPredicate() : {}
{
  (
    LOOKAHEAD(4) // choice conflict 발생, LOOKAHEAD 사용
    tableName()
    < PERIOD >
  )?
  columnName()
  nullOperation()
}

void nullOperation(): {}
{
  < IS >
  (
    < NOT >
  )?
  < NULL >
}

int tableConstraintDefinition(Table t) : { ArrayList<String> pkcl; ArrayList<Column> cl; }
{
  pkcl = primaryKeyConstraint()
  {
    // primary key list에 중복 있는 경우
    List<String> l = pkcl;
    Set<String> s = new HashSet<String>();
    s.addAll(l);
    if (s.size() != l.size()) {
      throw new ErrorException(Flags.DUPLICATE_COLUMN_DEF_ERROR);
    }
    // column에 primary key 설정, 존재하지 않는 column일 경우 에러
    for (String pkc: pkcl) {
      boolean exist = false;
      for (Column c: t.getColumns()) {
        if (c.getName().equals(pkc)) {
          exist = true;
          c.setIsPrimaryKey(true);
          c.setIsNull(false);
          break;
        }
      }
      if (!exist) {
        throw new ErrorException(Flags.NON_EXISTING_COLUMN_DEF_ERROR, pkc);
      }
    }
    return Flags.PRIMARY_KEY;
  }
  | referentialConstraint(t)
  {
    return Flags.FOREIGN_KEY;
  }
}

ArrayList<Value> insertColumnsAndSource() : { ArrayList<String> cnl = null; ArrayList<Value> vl; }
{
  (
    cnl = columnNameList()
  )?
  vl = valueList()
  {
    if (cnl != null) {
      if (cnl.size() == vl.size()) {
        for (int i = 0; i < cnl.size(); i++) {
          vl.get(i).setColumnName(cnl.get(i));
        }
      } else {
        throw new ErrorException(Flags.INSERT_TYPE_MISMATCH_ERROR);
      }
    }
    return vl;
  }
}

ArrayList<Value> valueList() : { Value v; }
{
  {
    ArrayList<Value> vl = new ArrayList<Value>();
  }
  < VALUES >
  < LEFT_PAREN >
  v = value()
  {
    vl.add(v);
  }
  (
    < COMMA >
    v = value()
    {
      vl.add(v);
    }
  )*
  < RIGHT_PAREN >
  {
    return vl;
  }
}

Value value() : { Value v = null; }
{
  (
    < NULL >
  | v = comparableValue()
  )
  {
    return v;
  }
}

Value comparableValue() : { int iv; String sv; String dv; }
{
  < INT_VALUE >
   {
     iv = Integer.parseInt(token.image);
     return new Value(new DataType(Flags.INT, 0), Integer.toString(iv));
   }
| < CHAR_STRING >
  {
    sv = token.image.toLowerCase();
    return new Value(new DataType(Flags.CHAR, 0), sv);
  }
| < DATE_VALUE >
  {
    dv = token.image.toLowerCase();
    return new Value(new DataType(Flags.DATE, 0), dv);
  }
}

void tableExpression() : {}
{
  fromClause()
  (
    whereClause()
  )?
}

void selectList() : {}
{
  < ALL >
| selectedColumn()
  (
    < COMMA >
    selectedColumn()
  )*
}

void selectedColumn() : {}
{
  (
    LOOKAHEAD(4) // choice conflict 발생, LOOKAHEAD 사용
    tableName()
    < PERIOD >
  )?
  columnName()
  (
    < AS >
    columnName()
  )?
}

ArrayList<String> primaryKeyConstraint() : { ArrayList<String> pkl;}
{
  < PRIMARY_KEY >
  pkl = columnNameList()
  {
    return pkl;
  }
}

void referentialConstraint(Table t) : { ArrayList<String> cnl; String rtn; ArrayList<String> fknl; }
{
  < FOREIGN_KEY >
  cnl = columnNameList()
  < REFERENCES >
  rtn = tableName()
  fknl = columnNameList()
  {
    // foreign key가 존재하지 않는 table을 참조하는 경우
    if (!dbms.isExistingTable(rtn)) {
      throw new ErrorException(Flags.REFERENCE_TABLE_EXISTENCE_ERROR);
    }

    // foreign key가 참조하는 column의 개수가 다른 경우
    if (cnl.size() != fknl.size()) {
      throw new ErrorException(Flags.REFERENCE_TYPE_ERROR);
    }

    String notExistingColumn;
    ArrayList<Column> rcl = new ArrayList<Column>();
    ArrayList<Column> cl = new ArrayList<Column>();
    
    // foreign key가 존재하지 않는 column을 참조하는 경우
    Table rt = dbms.getTable(rtn);
    notExistingColumn = dbms.compareColumnLists(fknl, rt.getColumns());
    if (notExistingColumn != null) {
      throw new ErrorException(Flags.REFERENCE_COLUMN_EXISTENCE_ERROR);
    }
    
    // 존재하지 않는 컬럼을 foreign key로 정의한 경우
    notExistingColumn = dbms.compareColumnLists(cnl, t.getColumns());
    if (notExistingColumn != null) {
      throw new ErrorException(Flags.NON_EXISTING_COLUMN_DEF_ERROR, notExistingColumn);
    }

    int len = cnl.size();
    // 지목된 column들 추출
    for (int i = 0; i < len; i++) {
      for (Column rc: rt.getColumns()) {
        if (rc.getName().equals(fknl.get(i))) {
          rcl.add(rc);
        }
      }
      for (Column c: t.getColumns()) {
        if (c.getName().equals(cnl.get(i))) {
          cl.add(c);
        }
      }
    }

    // primary key가 아닌 column을 참조하는 경우
    for (Column c: cl) {
      if (c.getIsPrimaryKey()) {
        throw new ErrorException(Flags.REFERENCE_NON_PRIMARY_KEY_ERROR);
      }
    }

    // foreign key가 참조하는 column의 타입이 다른 경우
    for (int i = 0; i < len; i++) {
      if (!cl.get(i).getDataType().toString().equals(rcl.get(i).getDataType().toString())) {
        throw new ErrorException(Flags.REFERENCE_TYPE_ERROR);
      }
    }

    // column에 foreign key 정보 저장
    for (int i = 0; i < len; i++) {
      cl.get(i).setIsForeignKey(true);
      cl.get(i).setForeignKey(rt, rcl.get(i));
      rcl.get(i).setIsReferenced(true);
    }
  }
}

ArrayList<String> columnNameList() : { ArrayList<String> cl = new ArrayList<String>(); String cn; }
{
  < LEFT_PAREN >
  cn = columnName()
  {
    cl.add(cn);
  }
  (
    < COMMA >
    cn = columnName()
    {
      cl.add(cn);
    }
  )*
  < RIGHT_PAREN >
  {
    return cl;
  }
}

DataType dataType() : { int dt; int cl = 0; }
{
  < INT >
  {
    dt = Flags.INT;
    return new DataType(dt, cl);
  }
| (
    < CHAR >
    {
      dt = Flags.CHAR;
    }
    < LEFT_PAREN >
    < INT_VALUE >
    {
      cl = Integer.parseInt(token.image);
    }
    < RIGHT_PAREN >
    {
      if (cl <= 0) {
        throw new ErrorException(Flags.CHAR_LENGTH_ERROR);
      }
      return new DataType(dt, cl);
    }
  )
| < DATE >
  {
    dt = Flags.DATE;
    return new DataType(dt, cl);
  }
}

String tableName() : {}
{
  < LEGAL_IDENTIFIER >
  {
    return token.image.toLowerCase();
  }
}

String columnName() : {}
{
  < LEGAL_IDENTIFIER >
  {
    return token.image.toLowerCase();
  }
}