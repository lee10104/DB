options
{
  static = true;
  DEBUG_PARSER = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(SimpleDBMSParser)

import db.*;

public class SimpleDBMSParser
{
  private static SimpleDBMS dbms = new SimpleDBMS();
  
  public static void main(String args[]) throws ParseException, ErrorException
  {
    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    System.out.print("DB_2013-11422> ");

    while (true)
    {
      try
      {
        parser.command();
      }
      catch (ParseException e)
      {
        PrintMessages p = new PrintMessages(Flags.SYNTAX_ERROR);
        p.print();
        SimpleDBMSParser.ReInit(System.in);
      }
      catch (ErrorException e)
      {
        e.p.print();
        SimpleDBMSParser.ReInit(System.in);
      }
    }
  }
}

PARSER_END(SimpleDBMSParser)

SKIP : { " " | "\r" | "\t" | "\n" }

// grammar file의 빨간 글씨로 된 keyword들
TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE_TABLE : "create table" >
| < DROP_TABLE : "drop table" >
| < DESC : "desc" >
| < INSERT : "insert into" >
| < DELETE : "delete from" >
| < SELECT : "select" >
| < SHOW_TABLES : "show tables" >
| < NULL : "null" >
| < NOT_NULL : "not null" >
| < PRIMARY_KEY : "primary key" >
| < FOREIGN_KEY : "foreign key" >
| < REFERENCES : "references" >
| < VALUES : "values" >
| < AS : "as" >
| < FROM : "from" >
| < WHERE : "where" >
| < OR : "or" >
| < AND : "and" >
| < NOT : "not" >
| < IS : "is" >
| < ALL : "*" > // '*'가 라벨로 작용할 수 없으므로 임의로 'ALL'을 붙임
}

// 그 외
TOKEN :
{
  < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >
| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >
| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >
| < SEMICOLON : ";" >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < PERIOD : "." >
| < UNDERSCORE : "_" >
| < SIGN : "+" | "-" >
| < DIGIT : [ "0"-"9" ] >
| < ALPHABET : [ "a"-"z", "A"-"Z" ] >
| < COMP_OP : ">" | "<" | "=" | ">=" | "<=" | "!=" >
| < QUOTE : "`" >
| < NNNN : (< DIGIT >){4} >
| < NN : (< DIGIT >){2} >
| < NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS > >
| < NON_QUOTE_SPECIAL_CHARACTERS : [ "~", "`", "!", "@", "#", "$", "%", "^", "&", "*", "(", ")", "-", "_", "+", "=",
"|", "{", "[", "]", "}", "\\", ";", ":", ",", "<", ".", ">", "?", "/"] >
| < UNUSED_QUOTE_MARK : "\'" | "\"" > // 따옴표 실수로 들어갔을 때 syntax error 뱉도록 token에 추가
}

// grammar file 그대로 구현
void command() : {}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
      dbms.close();
      System.exit(0);
    }
  ) 
}

void queryList() : { PrintMessages p; }
{
  (
    p = query()
    < SEMICOLON >
    {
      p.print();
    }
  )+
}

PrintMessages query() : { PrintMessages p; }
{
  (
    p = createTableQuery() { return p; }
  | p = dropTableQuery() { return p; }
  | p = descQuery() { return p; }
  | p = insertQuery() { return p; }
  | p = deleteQuery() { return p; }
  | p = selectQuery() { return p; }
  | p = showTablesQuery() { return p; }
  )
  (
    {
      return p;
    }
  )
}

PrintMessages createTableQuery() : { String tn; Table t; }
{
  < CREATE_TABLE >
  tn = tableName()
  {
    if (dbms.isExistingTable(tn)) {
      throw new ErrorException(Flags.TABLE_EXISTENCE_ERROR);
    } else {
      t = dbms.createTable(tn);
    }
  }
  tableElementList()
  {
    return new PrintMessages(Flags.CREATE_TABLE_DONE, tn);
  }
}

PrintMessages dropTableQuery() : { String tn; boolean isDeleted; }
{
  < DROP_TABLE >
  tn = tableName()
  {
    if (!dbms.isExistingTable(tn)) {
      throw new ErrorException(Flags.NO_SUCH_TABLE);
    }

    isDeleted = dbms.dropTable(tn);

    if (!isDeleted) {
      throw new ErrorException(Flags.DROP_REFERENCED_TABLE_ERROR, tn);
    }

    return new PrintMessages(Flags.DROP_TABLE_DONE);
  }
}

PrintMessages descQuery() : { String tn; }
{
  < DESC >
  tn = tableName()
  {
    if (!dbms.isExistingTable(tn)) {
      throw new ErrorException(Flags.NO_SUCH_TABLE);
    }
    dbms.printTable(tn);

    return new PrintMessages(Flags.DESC_DONE);
  }
}

PrintMessages insertQuery() : { String tn; }
{
  < INSERT >
  tn = tableName()
  insertColumnsAndSource()

  {
    return new PrintMessages(Flags.NOTHING);
  }
}

PrintMessages deleteQuery() : { String tn; }
{
  < DELETE >
  tn = tableName()
  (
    whereClause()
  )?
  
  {
    return new PrintMessages(Flags.NOTHING);
  }
}

PrintMessages selectQuery() : {}
{
  < SELECT >
  selectList()
  tableExpression()

  {
    return new PrintMessages(Flags.NOTHING);
  }
}

PrintMessages showTablesQuery() : {}
{
  < SHOW_TABLES >
  {
    dbms.showTables();
    return new PrintMessages(Flags.SHOW_TABLES_DONE);
  }
}

void tableElementList() : {}
{
  < LEFT_PAREN >
  tableElement()
  (
    < COMMA >
    tableElement()
  )*
  < RIGHT_PAREN >
}

void tableElement() : { Column c; }
{
  c = columnDefinition()
| tableConstraintDefinition()
}

Column columnDefinition() : { String cn; DataType dt; boolean isNull = false; boolean isPrivateKey = false; }
{
  cn = columnName()
  dt = dataType()
  (
    < NOT_NULL >
    { isNull = true; }
  )?
  {
    return new Column(cn, dt, isNull, isPrivateKey);
  }
}

void whereClause() : {}
{
  < WHERE >
  booleanValueExpression()
}

void fromClause() : {}
{
  < FROM >
  tableReferenceList()
}

void tableReferenceList() : {}
{
  referedTable()
  (
    < COMMA >
    referedTable()
  )?
}

void referedTable() : {}
{
  tableName()
  (
    LOOKAHEAD(4) // choice conflict 발생, LOOKAHEAD 사용
    < AS >
    tableName()
  )?
}

void booleanValueExpression() : {}
{
  booleanTerm()
  (
    < OR >
    booleanTerm()
  )*
}

void booleanTerm() : {}
{
  booleanFactor()
  (
    < AND >
    booleanFactor()
  )*
}

void booleanFactor() : {}
{
  (
    < NOT >
  )?
  booleanTest()
}

void booleanTest() : {}
{
  predicate()
| parenthesizedBooleanExpression()
}

void predicate() : {}
{
  LOOKAHEAD(4) // choice conflict 발생, LOOKAHEAD 사용
  comparisonPredicate()
| nullPredicate()
}

void comparisonPredicate() : {}
{
  compOperand()
  < COMP_OP >
  compOperand()
}

void compOperand() : {}
{
  comparableValue()
| (
    LOOKAHEAD(4) // choice conflict 발생, LOOKAHEAD 사용
    tableName()
    < PERIOD >
  )?
  columnName()
}

void parenthesizedBooleanExpression() : {}
{
  < LEFT_PAREN >
  booleanValueExpression()
  < RIGHT_PAREN >
}

void nullPredicate() : {}
{
  (
    LOOKAHEAD(4) // choice conflict 발생, LOOKAHEAD 사용
    tableName()
    < PERIOD >
  )?
  columnName()
  nullOperation()
}

void nullOperation(): {}
{
  < IS >
  (
    < NOT >
  )?
  < NULL >
}

void tableConstraintDefinition() : {}
{
  primaryKeyConstraint()
| referentialConstraint()
}

void insertColumnsAndSource() : {}
{
  (
    columnNameList()
  )?
  valueList()
}

void valueList() : {}
{
  < VALUES >
  < LEFT_PAREN >
  value()
  (
    < COMMA >
    value()
  )*
  < RIGHT_PAREN >
}

void value() : {}
{
  < NULL >
| comparableValue()
}

void comparableValue() : {}
{
  < INT_VALUE >
| < CHAR_STRING >
| < DATE_VALUE >
}

void tableExpression() : {}
{
  fromClause()
  (
    whereClause()
  )?
}

void selectList() : {}
{
  < ALL >
| selectedColumn()
  (
    < COMMA >
    selectedColumn()
  )*
}

void selectedColumn() : {}
{
  (
    LOOKAHEAD(4) // choice conflict 발생, LOOKAHEAD 사용
    tableName()
    < PERIOD >
  )?
  columnName()
  (
    < AS >
    columnName()
  )?
}

void primaryKeyConstraint() : {}
{
  < PRIMARY_KEY >
  columnNameList()
}

void referentialConstraint() : {}
{
  < FOREIGN_KEY >
  columnNameList()
  < REFERENCES >
  tableName()
  columnNameList()
}

void columnNameList() : {}
{
  < LEFT_PAREN >
  columnName()
  (
    < COMMA >
    columnName()
  )*
  < RIGHT_PAREN >
}

DataType dataType() : { int dt; int cl = 0; }
{
  < INT >
  {
    dt = Flags.INT;
  }
| (
    < CHAR >
    {
      dt = Flags.CHAR;
    }
    < LEFT_PAREN >
    < INT_VALUE >
    {
      cl = Integer.parseInt(token.image);
    }
    < RIGHT_PAREN >
  )
| < DATE >
  {
    dt = Flags.DATE;
  }
  {
    if (dt == Flags.CHAR && cl <= 0) {
      throw new ErrorException(Flags.CHAR_LENGTH_ERROR);
    }
    return new DataType(dt, cl);
  }
}

String tableName() : {}
{
  < LEGAL_IDENTIFIER >
  {
    return token.image.toLowerCase();
  }
}

String columnName() : {}
{
  < LEGAL_IDENTIFIER >
  {
    return token.image.toLowerCase();
  }
}